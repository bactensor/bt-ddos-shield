from abc import ABC, abstractmethod

class Event:
    """
    Class describing event, which happened in the shield.
    """

    event_description: str
    exception: Exception

    def __init__(self, event_description: str, exception: Exception = None):
        """
        Args:
            event_description: Description of the event.
            exception: Exception which caused the event.
        """
        self.event_description = event_description
        self.exception = exception

class EventManager(ABC):
    """
    Abstract base class for manager handling events generated by shield.
    """

    def __init__(self):
        pass

    @abstractmethod
    def add_event(self, event: Event):
        """
        Add new event to manager.

        Args:
            event: Event to add.
        """
        pass
