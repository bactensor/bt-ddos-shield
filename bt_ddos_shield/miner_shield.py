from dataclasses import dataclass

from bt_ddos_shield.blockchain_manager import AbstractBlockchainManager
from bt_ddos_shield.event_processor import AbstractEventProcessor
from bt_ddos_shield.address_manager import AbstractAddressManager
from bt_ddos_shield.validators_manager import AbstractValidatorsManager
from bt_ddos_shield.manifest_manager import AbstractManifestManager
from bt_ddos_shield.state_manager import AbstractMinerShieldStateManager


Hotkey = str # type of Hotkey


@dataclass
class MinerShieldOptions:
    """
        A class to represent the configuration options for the MinerShield.
    """

    auto_hide_original_server: bool = False # If True, the original server will be hidden after some time after shield
                                            # gets enabled. Method hide_original_server in AddressManager will be called.

    auto_hide_delay_sec: int = 600          # Time in seconds after which the original server will be hidden if
                                            # auto_hide_original_server is set to True.


class MinerShield:
    """
    Main class to be used by Miner to shield himself from DDoS. Call enable() to start the shield.
    """

    def __init__(self, validators_manager: AbstractValidatorsManager, address_manager: AbstractAddressManager,
                 manifest_manager: AbstractManifestManager, blockchain_manager: AbstractBlockchainManager,
                 state_manager: AbstractMinerShieldStateManager, event_processor: AbstractEventProcessor,
                 options: MinerShieldOptions):
        """
        Initialize the MinerShield class.

        Args:
            validators_manager: Instance of AbstractValidatorsManager to manage validators and their keys.
            address_manager: Instance of AbstractAddressManager to manage public IP/domain addresses assigned to validators.
            manifest_manager: Instance of AbstractManifestManager to manage publishing manifest file.
            blockchain_manager: Instance of AbstractBlockchainManager to manage blockchain operations.
            state_manager: Instance of AbstractMinerShieldStateManager to manage state of the shield.
            event_processor: Instance of AbstractEventProcessor to handle events generated by the shield.
            options: Instance of MinerShieldOptions.
        """
        pass

    def enable(self):
        """
        Enable shield. It asynchronously starts the shield, which consists of such steps:
        1. Fetch validators keys.
        2. Creates addresses for all validators.
        3. Save manifest file.
        4. Publish link to manifest file to blockchain.
        5. Eventually close public access to original IP after some time.

        It puts events to event_manager after each step. Current state is managed by state_manager. If shielding
        process had been interrupted it is continued from the last step.

        When shield is running, changing validators set triggers shield reconfiguration.
        """
        pass

    def ban_validator(self, validator_hotkey: Hotkey):
        """
        Ban a validator by its hotkey. Function blocks execution until manifest file is updated and info about file
        is published to Bittensor.

        Args:
            validator_hotkey: The hotkey of the validator.
        """
        pass
