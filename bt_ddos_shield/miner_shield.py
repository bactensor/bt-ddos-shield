from bt_ddos_shield.blockchain_manager import BlockchainManager
from bt_ddos_shield.event_manager import EventManager
from bt_ddos_shield.dns_manager import DNSManager
from bt_ddos_shield.validators_manager import ValidatorsManager
from bt_ddos_shield.manifest_manager import ManifestManager
from bt_ddos_shield.state_manager import StateManager


class MinerShieldOptions:
    """
        A class to represent the configuration options for the MinerShield.
    """

    def __init__(self, auto_hide_original_server: bool = False, auto_hide_delay_sec: int = 600):
        """
        Initialize the MinerShieldOptions class.

        Args:
            auto_hide_original_server: If True, the original server will be hidden after some time after shield gets
                                       enabled. Method hide_original_server in DNSManager will be called.
            auto_hide_delay_sec: Time in seconds after which the original server will be hidden if
                                 auto_hide_original_server is set to True.
        """
        self.auto_hide_original_server = auto_hide_original_server
        self.auto_hide_delay_sec = auto_hide_delay_sec

class MinerShield:
    """
    Main class to be used by Miner to shield himself from DDoS. Call enable() to start the shield.
    """

    def __init__(self, validators_manager: ValidatorsManager, dns_manager: DNSManager, manifest_manager: ManifestManager,
                 blockchain_manager: BlockchainManager, state_manager: StateManager, event_manager: EventManager,
                 options: MinerShieldOptions):
        """
        Initialize the MinerShield class.

        Args:
            validators_manager: Instance of ValidatorsManager to manage validators and their keys.
            dns_manager: Instance of DNSManager to manage public IP/domain addresses assigned to validators.
            manifest_manager: Instance of ManifestManager to manage publishing manifest file.
            blockchain_manager: Instance of BlockchainManager to manage blockchain operations.
            state_manager: Instance of StateManager to manage state of the shield.
            event_manager: Handles events generated by the shield.
            options: Instance of MinerShieldOptions.
        """
        pass

    def enable(self):
        """
        Enable shield. It asynchronously starts the shield, which consists of such steps:
        1. Fetch validators keys.
        2. Creates IPs/domains for all validators.
        3. Save manifest file.
        4. Publish link to manifest file to blockchain.
        5. Eventually close public access to original IP after some time.

        It puts events to event_manager after each step. Current state is managed by state_manager. If shielding
        process had been interrupted it is continued from the last step.

        When shield is running, changing validators set triggers shield reconfiguration.
        """
        pass

    def ban_validator(self, validator_hotkey: str):
        """
        Ban a validator by its hotkey. Function blocks execution until manifest file is updated and info about file
        is published to Bittensor.

        Args:
            validator_hotkey: The hotkey of the validator.
        """
        pass
