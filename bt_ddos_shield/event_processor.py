from abc import ABC, abstractmethod
from dataclasses import dataclass
import traceback


@dataclass
class MinerShieldEvent:
    """
    Class describing event, which happened in the shield.
    """

    event_description: str       # Description of the event.
    exception: Exception = None  # Exception which caused the event.


class AbstractMinerShieldEventProcessor(ABC):
    """
    Abstract base class for processor handling events generated by shield.
    """

    @abstractmethod
    def add_event(self, event: MinerShieldEvent):
        """
        Add new event to be handled by processor.

        Args:
            event: Event to add.
        """
        pass


class LoggingMinerShieldEventProcessor(AbstractMinerShieldEventProcessor):
    """
    Event processor which logs events to console.
    """

    def add_event(self, event: MinerShieldEvent):
        if event.exception is not None:
            print(f"MinerShieldEvent: {event.event_description}\nException happened:")
            print(traceback.format_exc())
        else:
            print(f"MinerShieldEvent: {event.event_description}")
